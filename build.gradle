buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.8.1"
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.2.0"
    }
}

plugins {
    id 'java'
    id 'idea'
}

group 'chat.ros.testing2'
version '1.0'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
}

apply plugin: 'io.qameta.allure'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'

jar {
    baseName('roschat-ms')
    version('2.0')
    exclude ("chat/ros/testing2/server/MonitoringPage.class")
    exclude ("chat/ros/testing2/data/SettingsData.class")
    exclude ("chat/ros/testing2/server/settings/**")
    enabled = true
}

dependencies {
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.0'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.0'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-params
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.6.0'
    // https://mvnrepository.com/artifact/org.junit/junit5-engine
    compile group: 'org.junit', name: 'junit5-engine', version: '5.0.0-ALPHA'
    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-runner
    testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.7.0-M1'
    // https://mvnrepository.com/artifact/org.junit.vintage/junit-vintage-engine
    testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.7.0-M1'
    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-suite-api
    testCompile group: 'org.junit.platform', name: 'junit-platform-suite-api', version: '1.7.0-M1'

    //dependencies for selenium
    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
    // https://mvnrepository.com/artifact/com.codeborne/selenide
    compile group: 'com.codeborne', name: 'selenide', version: '5.4.1'
    // https://mvnrepository.com/artifact/ru.stqa.selenium/webdriver-factory
    compile group: 'ru.stqa.selenium', name: 'webdriver-factory', version: '4.3'

    //dependencies for reporting
    // https://mvnrepository.com/artifact/io.qameta.allure/allure-junit5
    testCompile group: 'io.qameta.allure', name: 'allure-junit5', version: '2.13.1'
    // https://mvnrepository.com/artifact/io.qameta.allure/allure-junit-platform
    compile group: 'io.qameta.allure', name: 'allure-junit-platform', version: '2.13.1'
    // https://mvnrepository.com/artifact/io.qameta.allure/allure-selenide
    compile group: 'io.qameta.allure', name: 'allure-selenide', version: '2.13.1'
    // https://mvnrepository.com/artifact/ru.yandex.qatools.ashot/ashot
    compile group: 'ru.yandex.qatools.ashot', name: 'ashot', version: '1.5.4'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    compile group: 'org.slf4j', name: 'slf4j-api', version: '2.0.0-alpha1'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12
    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '2.0.0-alpha1'

    //Dependencies for connect ssh
    // https://mvnrepository.com/artifact/com.jcraft/jsch
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.55'

    //local library
    compile fileTree(dir: 'libs', include: '*.jar')
}

allure {
    version = '2.8.1'
    autoconfigure = true
    aspectjweaver = true

    downloadLink = 'https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.8.1/allure-commandline-2.8.1.zip'

    useJUnit5 {
        version = '2.13.1'
    }
}

task contactsclosedchannels(type: Test) {

    useJUnitPlatform()

    description "Тестирование добавления пользователя для тестирования закрытых каналов"

    dependsOn 'cleanTest'

    //Parametrized Test

    filter {
        //include specific method in any of the tests
        includeTestsMatching "*.TestContactsPage.test_Add_Contacts_For_Closed_Channel"
    }

    testLogging {
        events "passed", "skipped", "failed"
    }

}

task contactspublicchannels(type: Test) {

    useJUnitPlatform()

    description "Тестирование добавления пользователя для тестирования публичных каналов"

    dependsOn 'cleanTest'

    //Parametrized Test

    filter {
        //include specific method in any of the tests
        includeTestsMatching "*.TestContactsPage.test_Add_Contacts_For_Public_Channel"
    }

    testLogging {
        events "passed", "skipped", "failed"
    }

}

task contactspublicprovenchannels(type: Test) {

    useJUnitPlatform()

    description "Тестирование добавления пользователя для тестирования проверенных каналов"

    dependsOn 'cleanTest'

    //Parametrized Test

    filter {
        //include specific method in any of the tests
        includeTestsMatching "*.TestContactsPage.test_Add_Contacts_For_Public_Proven_Channel"
    }

    testLogging {
        events "passed", "skipped", "failed"
    }

}

task contactservice(type: Test) {

    useJUnitPlatform()

    description "Тестирование добавления пользователя для тестирования добавления сервисов у пользователя"

    dependsOn 'cleanTest'

    filter {
        //include specific method in any of the tests
        includeTestsMatching "*.TestContactsPage.test_Add_Contacts_For_Service"
    }

    testLogging {
        events "passed", "skipped", "failed"
    }

}

task contactconnect(type: Test) {

    useJUnitPlatform()

    description "Тестирование добавления пользователя для тестирования портов в разделе Подключение"

    dependsOn 'cleanTest'

    filter {
        //include specific method in any of the tests
        includeTestsMatching "*.TestContactsPage.test_Add_Contacts_For_Connect"
    }

    testLogging {
        events "passed", "skipped", "failed"
    }

}

task testpublicchannels(type: Test){

    useJUnitPlatform()

    description "Тестирование публичных каналов"

    systemProperties = [
            'junit.jupiter.execution.parallel.enabled':'true',
            'junit.jupiter.execution.parallel.config.strategy':'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism':'2',
            'junit.jupiter.execution.parallel.mode.default':'same_thread',
            'junit.jupiter.execution.parallel.mode.classes.default':'concurrent'
    ]

    dependsOn contactspublicchannels

    include("**/TestPublicChannel.class")
    include("**/TestPublicChannelChange.class")

    testLogging {
        events "passed", "skipped", "failed"
    }
}

task testpublicprovenchannels(type: Test){

    useJUnitPlatform()

    description "Тестирование проверенных каналов"

    systemProperties = [
            'junit.jupiter.execution.parallel.enabled':'true',
            'junit.jupiter.execution.parallel.config.strategy':'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism':'2',
            'junit.jupiter.execution.parallel.mode.default':'same_thread',
            'junit.jupiter.execution.parallel.mode.classes.default':'concurrent'
    ]

    dependsOn contactspublicprovenchannels

    include("**/TestPublicProvenChannel.class")
    include("**/TestPublicProvenChannelChange.class")

    testLogging {
        events "passed", "skipped", "failed"
    }
}

task testclosedchannels(type: Test){

    useJUnitPlatform()

    description "Тестирование закрытых каналов"

    systemProperties = [
            'junit.jupiter.execution.parallel.enabled':'true',
            'junit.jupiter.execution.parallel.config.strategy':'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism':'2',
            'junit.jupiter.execution.parallel.mode.default':'same_thread',
            'junit.jupiter.execution.parallel.mode.classes.default':'concurrent'
    ]

    dependsOn contactsclosedchannels

    include("**/TestClosedChannel.class")
    include("**/TestClosedChannelChange.class")

    testLogging {
        events "passed", "skipped", "failed"
    }

    finalizedBy(testpublicchannels,testpublicprovenchannels)
}

task testintegration(type: Test){

    useJUnitPlatform()

    description "Тестирование сервисы интеграции СКУД и Active Directory"

    include("**/TestActiveDirectoryPage.class")
    include("**/TestMonitorSkudOM.class")
    include("**/TestMonitorSkudOrion.class")
    include("**/TestMonitorSkudPerco.class")

    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task testtetra(type: Test){

    useJUnitPlatform()

    description "Тестирование сервиса Тетра"

    include("**/TestTetraPage.class")

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task testservice(type: Test){

    useJUnitPlatform()

    description "Тестирование добавления сервисов пользователю"

    include("**/TestServicePage.class")

    dependsOn testtetra,contactservice

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task roschatsnmp(type: Test){

    useJUnitPlatform()

    description "Тестирование раздела SNMP"

    include("**/server/TestSNMPPage.class")

    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task testconnect(type: Test){

    useJUnitPlatform()

    description "Прописываем в разделе Подключение разные порты и проверяем, подключается ли клиент на этих портах " +
            "серверу"

    filter {
        //include specific method in any of the tests
        includeTestsMatching "*.TestServerPage.test_Settings_Connect"
    }

    dependsOn contactconnect

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task roschatdb {
    dependsOn testservice, contactconnect, testclosedchannels
}

task roschatserver(type: Test){
    useJUnitPlatform()

    filter {
        //include specific method in any of the tests
        includeTestsMatching "*.server.*"
        excludeTestsMatching "*.server.integration.*"
        excludeTestsMatching "*.TestServerPage.test_Settings_Connect"
    }

    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }

    finalizedBy(testconnect, testintegration, testservice, testclosedchannels)
}

/***
 * Параметризированные тесты
 */

task paramtests_server_valid(type: Test) {
    useJUnitPlatform()

    description "Тестирование на валидные значения"

    dependsOn 'cleanTest'

    systemProperties = [
            'junit.jupiter.execution.parallel.enabled':'true',
            'junit.jupiter.execution.parallel.config.strategy':'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism':'2',
            'junit.jupiter.execution.parallel.mode.default':'same_thread',
            'junit.jupiter.execution.parallel.mode.classes.default':'concurrent'
    ]

    //Parametrized Test
    include("**/TestParametersServerConnectValidPorts.class")
    include("**/TestParametersServerPushValidPort")


    testLogging {
        events "passed", "skipped", "failed"
    }

    finalizedBy(roschatserver)
}

task paramtests_mail_wrong(type: Test) {
    useJUnitPlatform()

    description "Тестирование раздела Почта на невалидные значения"

    dependsOn 'cleanTest'

    systemProperties = [
            'junit.jupiter.execution.parallel.enabled':'true',
            'junit.jupiter.execution.parallel.config.strategy':'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism':'4',
            'junit.jupiter.execution.parallel.mode.default':'same_thread',
            'junit.jupiter.execution.parallel.mode.classes.default':'concurrent'
    ]

    //Parametrized Test
    include("**/TestParametersMailEmptyValue.class")
    include("**/TestParametersMailMaxLengthPort.class")
    include("**/TestParametersMailWrongHostServer.class")
    include("**/TestParametersMailWrongMail.class")


    testLogging {
        events "passed", "skipped", "failed"
    }

    finalizedBy(paramtests_server_valid)
}

task paramtests_telephony_turn(type: Test){
    useJUnitPlatform()

    description "Тестирование раздела TURN/STUN на невалидные значения"

    dependsOn 'cleanTest'

    systemProperties = [
            'junit.jupiter.execution.parallel.enabled':'true',
            'junit.jupiter.execution.parallel.config.strategy':'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism':'3',
            'junit.jupiter.execution.parallel.mode.default':'same_thread',
            'junit.jupiter.execution.parallel.mode.classes.default':'concurrent'
    ]

    //Parametrized Test
    include("**/TestParametersTelephonyEmptyTurn.class")
    include("**/TestParametersTelephonyTurnWrongMinPort.class")
    include("**/TestParametersTelephonyTurnWrongMaxPort.class")

    testLogging {
        events "passed", "skipped", "failed"
    }

    finalizedBy(paramtests_mail_wrong)
}

task paramtests_telephony_sip(type: Test){
    useJUnitPlatform()

    description "Тестирование раздела SIP-сервер на невалидные значения"

    dependsOn 'cleanTest'

    systemProperties = [
            'junit.jupiter.execution.parallel.enabled':'true',
            'junit.jupiter.execution.parallel.config.strategy':'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism':'3',
            'junit.jupiter.execution.parallel.mode.default':'same_thread',
            'junit.jupiter.execution.parallel.mode.classes.default':'concurrent'
    ]

    //Parametrized Test
    include("**/TestParametersTelephonyEmptySip.class")
    include("**/TestParametersTelephonySipWrongMinPort.class")
    include("**/TestParametersTelephonySipWrongMaxPort.class")

    testLogging {
        events "passed", "skipped", "failed"
    }

    finalizedBy(paramtests_telephony_turn)
}

task paramtests_telephony_network(type: Test) {
    useJUnitPlatform()

    description "Тестирование раздела Сеть на невалидные значения"

    dependsOn 'cleanTest'

    systemProperties = [
            'junit.jupiter.execution.parallel.enabled':'true',
            'junit.jupiter.execution.parallel.config.strategy':'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism':'4',
            'junit.jupiter.execution.parallel.mode.default':'same_thread',
            'junit.jupiter.execution.parallel.mode.classes.default':'concurrent'
    ]

    //Parametrized Test
    include("**/TestParametersTelephonyEmptyNetwork.class")
    include("**/TestParametersTelephonyNetworkWrongFrontDev.class")
    include("**/TestParametersTelephonyNetworkWrongInsideDev.class")
    include("**/TestParametersTelephonyNetworkWrongPublicAddress.class")

    testLogging {
        events "passed", "skipped", "failed"
    }

    finalizedBy(paramtests_telephony_sip)
}

task paramtests_push_wrong(type: Test) {
    useJUnitPlatform()

    description "Тестирование раздела Лицензирование и обсуживание на невалидные значения"

    dependsOn 'cleanTest'

    systemProperties = [
            'junit.jupiter.execution.parallel.enabled':'true',
            'junit.jupiter.execution.parallel.config.strategy':'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism':'2',
            'junit.jupiter.execution.parallel.mode.default':'same_thread',
            'junit.jupiter.execution.parallel.mode.classes.default':'concurrent'
    ]

    //Parametrized Test
    include("**/TestParametersServerPushWrongHost.class")
    include("**/TestParametersServerPushWrongPort.class")

    testLogging {
        events "passed", "skipped", "failed"
    }

    //finalizedBy(paramtests_telephony_network)
}

task paramtests_connect_wrong(type: Test) {
    useJUnitPlatform()

    description "Тестирование раздела Подключение на невалидные значения"

    dependsOn 'cleanTest'

    systemProperties = [
            'junit.jupiter.execution.parallel.enabled':'true',
            'junit.jupiter.execution.parallel.config.strategy':'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism':'4',
            'junit.jupiter.execution.parallel.mode.default':'same_thread',
            'junit.jupiter.execution.parallel.mode.classes.default':'concurrent'
    ]

    //Parametrized Test
    include("**/TestParametersServerConnectWrongHost.class")
    include("**/TestParametersServerConnectWrongHttpPort.class")
    include("**/TestParametersServerConnectWrongHttpsPort.class")
    include("**/TestParametersServerConnectWrongWebsocketPort.class")

    testLogging {
        events "passed", "skipped", "failed"
    }

    finalizedBy(paramtests_push_wrong)
}